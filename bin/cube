#!/usr/bin/env node
var debug = require('debug')('cube:cli');
var cmd = require('commander');
var fs = require('xfs');
var path = require('path');
var pkg = require(path.join(__dirname, '../package'));
var childProcess = require('child_process');

function getCwd() {
  return process.cwd();
}
/** find cube.js **/
function findCube(cb) {
  var base = getCwd();
  debug('find cube file: %s', base);
  var tar = [];
  fs.walk(base, function (err, file) {
    if (/(\/node_modules\/|\/\.git)/.test(file)) {
      return ;
    }
    var filename = path.basename(file);
    if (/^cube\.(min\.)?js$/.test(filename)) {
      tar.push(file);
    }
  }, function () {
    if (tar.length > 1) {
      console.log('[ERROR] more then one cube founded!', tar);
      return cb(null);
    } else if (!tar.length) {
      console.log('[]ERROR] cube not found');
      return cb(null);
    }
    cb(tar[0]);
  });
}

function optmizeInfo() {
  console.log('[INFO] you can custom cube.min.js file, i.e : css_runtime');
}

function filePath(file) {
  var base = getCwd();
  return path.join(base, file);
}

function sourcePath(file) {
  var base = __dirname;
  return path.join(base, '../', file);
}

cmd.version('v' + pkg.version);
/**
 * start an cube server
 */
cmd.command('start [path]', 'start server, if path is not giving');
/**
 * init project
 */
cmd.command('init', 'init project');
/**
 * build project
 */
cmd.command('build', 'build project');

cmd.command('module', 'build module');
/**
 * build into single file
 */
cmd.command('single', 'build single file');

cmd.command('install')
  .description('install dependences')
  .action(function (option, dir) {
    // dir = dir ? filePath(dir) : getCwd();
    var out = childProcess.execSync('npm3 -v').toString().trim();
    var m = out.match(/(\d+)\.(\d+)\.(\d+)/);
    if (!m) {
      console.log('[Error] npm3 not installed');
      console.log('using this cmd:  npm install -g npm3');
      process.exit(1);
    }
    childProcess.execSync('npm3 install');
  });

cmd.command('update')
  .description('update cube.min.js')
  .option('-a, --all', 'simple cube.min.js, no other run_time inculde')
  .action(function (option) {
    findCube(function (cubeFile) {
      if (!cubeFile) {
        return;
      }
      var codeCube = '//cube.min.js\n' + fs.readFileSync(sourcePath('./runtime/cube.min.js')).toString();
      if (option.all) {
        console.log('enabled jade');
        codeCube += '\n//jade_runtime\n' + fs.readFileSync(sourcePath('./runtime/jade_runtime.min.js'));
        console.log('enabled ejs');
        codeCube += '\n//ejs_runtime\n' + fs.readFileSync(sourcePath('./runtime/ejs_runtime.min.js'));
        optmizeInfo();
      }
      fs.sync().save(cubeFile, codeCube);
      console.log(cubeFile, 'updated');
    });
  });

/**
 * build工程目录，并进行自动合并优化
 * node_modules目录将进行选择性build
 */

/*
cmd.command('dag')
  .usage('your_code_dir')
  .description('gen DAG graph')
  .action(function (tar) {
    var source = path.join(getCwd(), tar);
    if (/(\/|\\)$/.test(source)) {
      source = source.substr(0, source.length - 1);
    }
    var stat = fs.statSync(source);
    var root;
    var flagFile = false;
    if (stat.isFile()) {
      flagFile = true;
      root = path.dirname(source);
    } else {
      root = source;
    }
    var cube = new Cube({
      root: root
    });
    var processor = new JsProcessor(cube);

    // var stat = fs.statSync(source);
    if (flagFile) {
      source = path.basename(source);
      processor.process(source, {root: root, moduleWrap: true}, function () {
        end();
      });
    } else {
      fs.walk(source, /\.(js|coffee|jsx)$/, function (err, file, done) {
        if (err) {
          console.log('make dag error', err);
          process.exit(1);
        }
        file = file.substr(root.length);
        processor.process(file, {root: root, moduleWrap: true}, function () {
          done();
        });
      }, end);
    }

    function end() {
      // done
      var requires = JsProcessor.requires;
      var res = [];
      // {source: "Samsung", target: "Apple", type: "suit"}
      for (var i in requires) {
        requires[i].forEach(function (v) {
          res.push({source: i, target: v, type: 'suit'});
        });
      }
      var fstr = fs.readFileSync(path.join(__dirname, '../res/dag.html')).toString();
      fstr = fstr.replace(/\$\$\$_\$\$\$/, JSON.stringify(res));
      fs.sync().save(path.join(root, './dag_out.html'), fstr);
      console.log('browser open: ' + root + '/dag_out.html');
    }
  });
*/

cmd.command('help')
  .description('help')
  .action(function () {
    cmd.help();
  });

cmd.parse(process.argv);

if (!cmd.args.length) {
  cmd.help();
}
