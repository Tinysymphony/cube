#!/usr/bin/env node
'use strict';

const fs = require('xfs');
const path = require('path');
const cmd = require('commander');
const Cube = require('../index');

function getCwd() {
  return process.cwd();
}

function isAbsPath(p) {
  if (process.platform.indexOf('win') === 0) {
    return /^\w:/.test(p);
  } else {
    return /^\//.test(p);
  }
}

function buildOutput(err, info) {
  // cube.printFileShortNameMap();
  console.log('==================');
  if (!err) {
    err = [];
  }
  if (!Array.isArray(err)) {
    err = [err];
  }
  if (err && err.length) {
    err.forEach(function (e) {
      var out = [
        '*',
        'File:', e.file
      ];
      if (e.line) {
        out.push('Line:', e.line);
      }
      if (e.column) {
        out.push('Column:', e.column);
      }
      if (e.code) {
        out.push('Code:', e.code);
      }
      if (e.message) {
        out.push('Message:', e.message);
      }

      console.log.apply(console, out);
    });
  } else {
    console.log('    ');
  }
  console.log('==================');
  console.log(err.length ? 'Build Finished, Total Errors: ' + err.length :  ' Build Successfully');
  info && console.log('Files:', info.total, 'Cost:', info.time + 's');
  console.log('==================');
}
/**
 * source , -o,--output, -b, --base 是基于cwd路径, 互相之间没有依赖关系
 */
cmd
  .usage('-p processor1,processor2 your_code_dir')
  .description('build the hole project, including: less->css->min, script->wraped->min')
  .option('-p, --processors [value]', 'loading plugin processors, like `cube-coffee,cube-jsx`')
  .option('-o, --output [value]', 'set the output dir')
  .option('--output-file [value]', 'set the output file')
  .option('-b, --base [value]', 'set the cube base')
  .option('-r, --resbase [value]', 'the http base for resouce')
  .option('--merge', 'if merged dependences into a file')
  .option('--remote [value]', 'set the namespace for remote call')
  .option('--mangle-file-name', 'mangle the file name into random name')
  .option('--custom-export-files [value]', 'files which will be loaded in html, and should keep the original filename')
  .option('--without-compress', 'do not compress code')
  .option('--without-wrap', 'do not wraper code')
  .option('-t, --transform', 'transform es2015 codes')
  .option('--speedup', 'optmize build speed')
  .option('--smart', 'smart build, only build necessary')
  .parse(process.argv);

var source = cmd.args[0];
var args = cmd;

if (!args || !source) {
  this.help();
  return;
}
if (args.processors) {
  args.processors = args.processors.split(',');
  args.processors.forEach(function (v, i, a) {
    a[i] = v.trim();
  });
}
if (args.transform) {
  if (!args.processors) {
    args.processors = [];
  }
  args.processors.push('cube-es2015');
}

if (args.customExportFiles) {
  args.customExportFiles = args.customExportFiles.split(',');
}

if (args.speedup && args.smart) {
  throw new Error('--speedup or --smart');
}

var cwd = getCwd();
var fstat;
var inputPath, outputPath, cube, tool, root;
var compress = args.withoutCompress ? false : true;

root = args.base ? args.base : '';
if (root) {
  root = isAbsPath(root) ? root : path.join(cwd, root);
}
source = isAbsPath(source) ? source : path.join(cwd, source);
inputPath = source;
try {
  fstat = fs.statSync(source);
} catch (e) {
  console.log('source not fould', e);
  this.help();
  return;
}

if (fstat.isFile()) {
  if (!args.output && !args.outputFile) {
    console.error('`-o or --output-file`options missing, should tell cube the output');
    process.exit(1);
  }
  outputPath = args.output ?
    (isAbsPath(args.output) ? args.output : path.join(cwd, args.output)) :
    undefined;
  root = (root ? root : path.dirname(source)).replace(/(\/|\\)$/, '');
  cube = new Cube({
    release: true,
    root: root,
    compress: compress,
    middleware: false,
    processors: args.processors,
    resBase: args.resbase,
    remote: args.remote,
    withoutWrap: args.withoutWrap,
    mangleFileName: args.mangleFileName,
    mangleFileNameIgnore: ['/main.js'],
    customExportFiles: args.customExportFiles,
    lazyWrap: args.smart || args.speedup
  });
  tool = Cube.getTool();
  tool.processFile(cube, {
    src: source,
    dest: outputPath,
    destFile: args.outputFile
  }, buildOutput);
} else if (fstat.isDirectory()) {
  outputPath = args.output ? (isAbsPath(args.output) ? args.output : path.join(cwd, args.output)) : (source.replace(/(\/|\\)$/, '') + '.release');
  root = (root ? root : source).replace(/(\/|\\)$/, '');
  cube = new Cube({
    release: true,
    root: root,
    compress: compress,
    middleware: false,
    processors: args.processors,
    resBase: args.resbase,
    remote: args.remote,
    mangleFileName: args.mangleFileName,
    mangleFileNameIgnore: ['/main.js'],
    customExportFiles: args.customExportFiles,
    lazyWrap: args.smart || args.speedup
  });
  tool = Cube.getTool();
  let targetProcessor;
  if (args.smart) {
    targetProcessor = 'processDirSmart2';
  } else if (args.speedup) {
    targetProcessor = 'processDirSmart1';
  } else {
    targetProcessor = 'processDir';
  }
  tool[targetProcessor](cube, {src: inputPath, dest:outputPath}, buildOutput);
} else {
  console.log('unknow type input source', source);
}
